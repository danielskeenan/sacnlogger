set(CPACK_PACKAGE_NAME "${PROJECT_DISPLAY_NAME}")
set(CPACK_PACKAGE_VERSION "${PROJECT_VERSION}")
set(CPACK_PACKAGE_VENDOR "${PROJECT_AUTHOR}")
set(CPACK_PACKAGE_CONTACT "${PROJECT_AUTHOR} <dk@dankeenan.org>")
set(CPACK_PACKAGE_CHECKSUM "SHA256")
set(CPACK_RESOURCE_FILE_LICENSE "${PROJECT_BINARY_DIR}/LICENSE.html")
set(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME};${PROJECT_DISPLAY_NAME}")
set(CPACK_PACKAGE_FILE_NAME "${PROJECT_NAME}-${PROJECT_VERSION}-${CMAKE_SYSTEM_NAME}")
set(CPACK_MONOLITHIC_INSTALL On)
set(CPACK_STRIP_FILES On)

set(CPACK_RESOURCE_FILE_LICENSE "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.txt")
if (CMAKE_SYSTEM_NAME STREQUAL "Linux")
    set(CPACK_GENERATOR "TGZ;DEB;RPM")
    set(CPACK_DEBIAN_PACKAGE_NAME "${PROJECT_NAME}")
    set(CPACK_MONOLITHIC_INSTALL OFF)
    set(CPACK_DEB_COMPONENT_INSTALL ON)
    set(CPACK_RPM_COMPONENT_INSTALL ON)
    set(CPACK_RPM_MAIN_COMPONENT "main")
    set(CPACK_RPM_PACKAGE_LICENSE "GPL-v3")
    set(CPACK_DEBIAN_ENABLE_COMPONENT_DEPENDS ON)
    # Can't autodetect arch when crossbuilding.
    find_program(DPKG_ARCHITECTURE_PROG dpkg-architecture)
    if (DPKG_ARCHITECTURE_PROG)
        execute_process(COMMAND dpkg-architecture -q DEB_TARGET_ARCH
                OUTPUT_VARIABLE CPACK_DEBIAN_PACKAGE_ARCHITECTURE
                COMMAND_ERROR_IS_FATAL ANY
        )
        string(STRIP "${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}" CPACK_DEBIAN_PACKAGE_ARCHITECTURE)
        message(STATUS "Building DEB package for ${CPACK_DEBIAN_PACKAGE_ARCHITECTURE}")
    endif ()

    include(${PROJECT_SOURCE_DIR}/src/sacnlogger/sacnlogger_install.cmake)
elseif (CMAKE_SYSTEM_NAME STREQUAL "Windows")
    set(CPACK_GENERATOR "ZIP")
    set(CPACK_PACKAGE_INSTALL_DIRECTORY "${PROJECT_DISPLAY_NAME}")
    set(CPACK_PACKAGE_EXECUTABLES "${PROJECT_NAME};${PROJECT_DISPLAY_NAME}")
    set(CPACK_WIX_UPGRADE_GUID "6B551E7E-1764-4BD5-851E-1985F992A48D")
    set(CPACK_WIX_LICENSE_RTF "${CMAKE_CURRENT_SOURCE_DIR}/LICENSE.rtf")
    set(CPACK_WIX_PROGRAM_MENU_FOLDER ".")
    set(CPACK_WIX_PROPERTY_ARPURLINFOABOUT "${PROJECT_HOMEPAGE_URL}")
elseif (CMAKE_SYSTEM_NAME STREQUAL "Darwin")
    set(CPACK_GENERATOR "ZIP")
endif ()

include(CPack)

if (TARGET ${PROJECT_NAME})
    cpack_add_component(main
            DISPLAY_NAME Logger
            DESCRIPTION sacnlogger program
            REQUIRED
    )
endif ()

add_custom_target(packages
        COMMAND "${CMAKE_CPACK_COMMAND}" -B "${CMAKE_CURRENT_BINARY_DIR}"
        VERBATIM
        WORKING_DIRECTORY "${PROJECT_BINARY_DIR}"
        COMMENT "Building packages..."
)
